const puppeteer = require('puppeteer');

/**
 * COMPREHENSIVE CSRF 403 FORBIDDEN DEBUGGING TEST
 * 
 * This test implements the Triage & Debugging Protocol with:
 * 1. 5 distinct hypotheses tested simultaneously
 * 2. Extensive logging at every step around the issue
 * 3. Systematic validation of each hypothesis
 * 
 * HYPOTHESES TO TEST:
 * 1. CSRF token not being generated by addCSRFToken middleware
 * 2. CSRF token not being injected into HTML (still placeholder)
 * 3. Frontend not extracting CSRF token correctly
 * 4. CSRF token not being sent in API request headers
 * 5. Backend CSRF validation failing due to token mismatch/expiry
 */

class CSRF403ComprehensiveDebugTest {
    constructor() {
        this.browser = null;
        this.page = null;
        this.testResults = [];
        this.debugData = {};
    }

    async setup() {
        console.log('üîß SETTING UP COMPREHENSIVE CSRF DEBUGGING ENVIRONMENT...');
        this.browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        this.page = await this.browser.newPage();
        
        // Enable comprehensive logging
        this.page.on('console', msg => {
            console.log(`üåê CONSOLE [${msg.type()}]: ${msg.text()}`);
        });

        this.page.on('request', request => {
            console.log(`üöÄ REQUEST: ${request.method()} ${request.url()}`);
            console.log(`üöÄ REQUEST HEADERS:`, request.headers());
        });

        this.page.on('response', response => {
            if (response.status() >= 400) {
                console.log(`‚ùå ERROR RESPONSE: ${response.status()} ${response.url()}`);
                console.log(`‚ùå RESPONSE HEADERS:`, response.headers());
            }
        });

        this.page.on('pageerror', error => {
            console.log(`‚ùå PAGE ERROR: ${error.message}`);
        });
    }

    async teardown() {
        if (this.browser) {
            await this.browser.close();
        }
    }

    /**
     * HYPOTHESIS 1: CSRF token not being generated by addCSRFToken middleware
     * Test: Check if the backend is generating CSRF tokens when serving the transaction page
     */
    async testHypothesis1_CSRFTokenGeneration() {
        console.log('\nüß™ TESTING HYPOTHESIS 1: CSRF Token Generation by Backend');
        console.log('=' .repeat(70));
        
        try {
            // Navigate to transaction page through backend route
            console.log('üîç STEP 1.1: Navigating to transaction page via backend route...');
            await this.page.goto('https://109.123.238.197.sslip.io/api/main/transaction');
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // Check if we got redirected to login (authentication issue)
            const currentUrl = this.page.url();
            console.log('üîç STEP 1.2: Current URL after navigation:', currentUrl);
            
            if (currentUrl.includes('login')) {
                console.log('üîç STEP 1.3: Redirected to login, need to authenticate first...');
                await this.page.type('#username', 'manager');
                await this.page.type('#password', 'manager456');
                await this.page.click('#login-btn');
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                // Navigate again to transaction page
                console.log('üîç STEP 1.4: Navigating to transaction page after login...');
                await this.page.goto('https://109.123.238.197.sslip.io/api/main/transaction');
                await new Promise(resolve => setTimeout(resolve, 3000));
            }
            
            // Check page title to confirm we're on transaction page
            const pageTitle = await this.page.title();
            console.log('üîç STEP 1.5: Page title:', pageTitle);
            
            // Check if page loaded correctly
            const pageContent = await this.page.content();
            console.log('üîç STEP 1.6: Page contains "NEW TRANSACTION":', pageContent.includes('NEW TRANSACTION'));
            console.log('üîç STEP 1.7: Page contains "transaction-form":', pageContent.includes('transaction-form'));
            
            // Check for CSRF token in HTML
            const csrfMetaTag = await this.page.evaluate(() => {
                const meta = document.querySelector('meta[name="csrf-token"]');
                return meta ? meta.getAttribute('content') : null;
            });
            
            console.log('üîç STEP 1.8: CSRF meta tag content:', csrfMetaTag);
            console.log('üîç STEP 1.9: CSRF token is placeholder:', csrfMetaTag === '{{ an_actual_token }}');
            console.log('üîç STEP 1.10: CSRF token length:', csrfMetaTag?.length);
            
            // Check for CSRF token in hidden input
            const csrfHiddenInput = await this.page.evaluate(() => {
                const input = document.querySelector('input[name="csrf_token"]');
                return input ? input.value : null;
            });
            
            console.log('üîç STEP 1.11: CSRF hidden input value:', csrfHiddenInput);
            console.log('üîç STEP 1.12: Hidden input is placeholder:', csrfHiddenInput === '{{ an_actual_token }}');
            
            const result = {
                hypothesis: 'CSRF Token Generation by Backend',
                pageLoaded: pageContent.includes('NEW TRANSACTION'),
                csrfMetaTagExists: !!csrfMetaTag,
                csrfMetaTagContent: csrfMetaTag,
                csrfMetaTagIsPlaceholder: csrfMetaTag === '{{ an_actual_token }}',
                csrfHiddenInputExists: !!csrfHiddenInput,
                csrfHiddenInputContent: csrfHiddenInput,
                csrfHiddenInputIsPlaceholder: csrfHiddenInput === '{{ an_actual_token }}',
                conclusion: 'CSRF token generation is working' if (!csrfMetaTag || csrfMetaTag === '{{ an_actual_token }}') else 'CSRF token generation is FAILING'
            };
            
            console.log('üîç STEP 1.13: HYPOTHESIS 1 RESULT:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå HYPOTHESIS 1 TEST FAILED:', error);
            return {
                hypothesis: 'CSRF Token Generation by Backend',
                error: error.message,
                conclusion: 'TEST FAILED - Cannot determine CSRF token generation status'
            };
        }
    }

    /**
     * HYPOTHESIS 2: CSRF token not being injected into HTML (still placeholder)
     * Test: Verify if the backend is actually replacing the placeholder with real tokens
     */
    async testHypothesis2_CSRFTokenInjection() {
        console.log('\nüß™ TESTING HYPOTHESIS 2: CSRF Token Injection into HTML');
        console.log('=' .repeat(70));
        
        try {
            // Check if the page source contains the placeholder or real token
            const pageSource = await this.page.content();
            
            console.log('üîç STEP 2.1: Checking page source for CSRF token patterns...');
            console.log('üîç STEP 2.2: Page contains placeholder "{{ an_actual_token }}":', pageSource.includes('{{ an_actual_token }}'));
            
            // Look for hex token pattern (64 characters, hex format)
            const hexTokenPattern = /[a-f0-9]{64}/g;
            const hexTokens = pageSource.match(hexTokenPattern);
            console.log('üîç STEP 2.3: Hex tokens found in page source:', hexTokens?.length || 0);
            if (hexTokens) {
                console.log('üîç STEP 2.4: First hex token (first 20 chars):', hexTokens[0]?.substring(0, 20) + '...');
            }
            
            // Check if any token-like strings exist
            const tokenLikePatterns = pageSource.match(/[a-f0-9]{32,}/g);
            console.log('üîç STEP 2.5: Token-like patterns found:', tokenLikePatterns?.length || 0);
            
            // Check specific locations where tokens should be
            const csrfMetaContent = await this.page.evaluate(() => {
                const meta = document.querySelector('meta[name="csrf-token"]');
                return meta ? meta.getAttribute('content') : null;
            });
            
            const csrfHiddenValue = await this.page.evaluate(() => {
                const input = document.querySelector('input[name="csrf_token"]');
                return input ? input.value : null;
            });
            
            console.log('üîç STEP 2.6: CSRF meta tag content length:', csrfMetaContent?.length);
            console.log('üîç STEP 2.7: CSRF hidden input value length:', csrfHiddenValue?.length);
            
            const result = {
                hypothesis: 'CSRF Token Injection into HTML',
                placeholderExists: pageSource.includes('{{ an_actual_token }}'),
                hexTokensFound: hexTokens?.length || 0,
                tokenLikePatternsFound: tokenLikePatterns?.length || 0,
                csrfMetaTagLength: csrfMetaContent?.length,
                csrfHiddenInputLength: csrfHiddenValue?.length,
                conclusion: 'CSRF token injection is FAILING - placeholder still present' if pageSource.includes('{{ an_actual_token }}') else 'CSRF token injection appears to be working'
            };
            
            console.log('üîç STEP 2.8: HYPOTHESIS 2 RESULT:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå HYPOTHESIS 2 TEST FAILED:', error);
            return {
                hypothesis: 'CSRF Token Injection into HTML',
                error: error.message,
                conclusion: 'TEST FAILED - Cannot determine CSRF token injection status'
            };
        }
    }

    /**
     * HYPOTHESIS 3: Frontend not extracting CSRF token correctly
     * Test: Verify if JavaScript can read and extract the CSRF token from the page
     */
    async testHypothesis3_FrontendCSRFTokenExtraction() {
        console.log('\nüß™ TESTING HYPOTHESIS 3: Frontend CSRF Token Extraction');
        console.log('=' .repeat(70));
        
        try {
            // Test frontend token extraction
            const extractionTest = await this.page.evaluate(() => {
                console.log('üîç [FRONTEND] Testing CSRF token extraction...');
                
                // Test 1: Meta tag extraction
                const metaTag = document.querySelector('meta[name="csrf-token"]');
                console.log('üîç [FRONTEND] Meta tag found:', !!metaTag);
                console.log('üîç [FRONTEND] Meta tag content:', metaTag?.getAttribute('content'));
                
                // Test 2: Hidden input extraction
                const hiddenInput = document.querySelector('input[name="csrf_token"]');
                console.log('üîç [FRONTEND] Hidden input found:', !!hiddenInput);
                console.log('üîç [FRONTEND] Hidden input value:', hiddenInput?.value);
                
                // Test 3: API client token extraction (simulate what api.js does)
                const isModifyingRequest = true; // Simulate POST request
                let csrfToken = null;
                
                if (isModifyingRequest) {
                    const csrfTokenMeta = document.querySelector('meta[name="csrf-token"]');
                    if (csrfTokenMeta) {
                        csrfToken = csrfTokenMeta.getAttribute('content');
                        console.log('üîç [FRONTEND] API client extracted token:', csrfToken);
                        console.log('üîç [FRONTEND] Token is placeholder:', csrfToken === '{{ an_actual_token }}');
                        console.log('üîç [FRONTEND] Token length:', csrfToken?.length);
                    } else {
                        console.log('üîç [FRONTEND] API client: No CSRF meta tag found');
                    }
                }
                
                return {
                    metaTagExists: !!metaTag,
                    metaTagContent: metaTag?.getAttribute('content'),
                    hiddenInputExists: !!hiddenInput,
                    hiddenInputValue: hiddenInput?.value,
                    apiClientToken: csrfToken,
                    apiClientTokenIsPlaceholder: csrfToken === '{{ an_actual_token }}',
                    apiClientTokenLength: csrfToken?.length
                };
            });
            
            console.log('üîç STEP 3.1: Frontend extraction test results:', extractionTest);
            
            const result = {
                hypothesis: 'Frontend CSRF Token Extraction',
                metaTagExists: extractionTest.metaTagExists,
                metaTagContent: extractionTest.metaTagContent,
                hiddenInputExists: extractionTest.hiddenInputExists,
                hiddenInputValue: extractionTest.hiddenInputValue,
                apiClientToken: extractionTest.apiClientToken,
                apiClientTokenIsPlaceholder: extractionTest.apiClientTokenIsPlaceholder,
                apiClientTokenLength: extractionTest.apiClientTokenLength,
                conclusion: 'Frontend CSRF token extraction is FAILING - token is placeholder' if extractionTest.apiClientTokenIsPlaceholder else 'Frontend CSRF token extraction appears to be working'
            };
            
            console.log('üîç STEP 3.2: HYPOTHESIS 3 RESULT:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå HYPOTHESIS 3 TEST FAILED:', error);
            return {
                hypothesis: 'Frontend CSRF Token Extraction',
                error: error.message,
                conclusion: 'TEST FAILED - Cannot determine frontend CSRF token extraction status'
            };
        }
    }

    /**
     * HYPOTHESIS 4: CSRF token not being sent in API request headers
     * Test: Verify if the frontend is actually sending the CSRF token in API requests
     */
    async testHypothesis4_CSRFTokenInRequestHeaders() {
        console.log('\nüß™ TESTING HYPOTHESIS 4: CSRF Token in Request Headers');
        console.log('=' .repeat(70));
        
        try {
            // Test API request with CSRF token
            const apiRequestTest = await this.page.evaluate(async () => {
                console.log('üîç [FRONTEND] Testing API request with CSRF token...');
                
                // Get CSRF token
                const csrfTokenMeta = document.querySelector('meta[name="csrf-token"]');
                const csrfToken = csrfTokenMeta ? csrfTokenMeta.getAttribute('content') : null;
                
                console.log('üîç [FRONTEND] CSRF token for request:', csrfToken);
                console.log('üîç [FRONTEND] Token is placeholder:', csrfToken === '{{ an_actual_token }}');
                
                if (!csrfToken || csrfToken === '{{ an_actual_token }}') {
                    return {
                        error: 'No valid CSRF token available for testing',
                        csrfToken: csrfToken,
                        isPlaceholder: csrfToken === '{{ an_actual_token }}'
                    };
                }
                
                // Create test transaction data
                const testData = {
                    masseuse_name: 'Test Masseuse',
                    service_type: 'Test Service',
                    payment_method: 'Cash',
                    start_time: '10:00 AM',
                    end_time: '11:00 AM',
                    customer_contact: 'test@example.com'
                };
                
                console.log('üîç [FRONTEND] Test data:', testData);
                
                // Make API request
                const response = await fetch('/api/transactions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify(testData)
                });
                
                console.log('üîç [FRONTEND] API response status:', response.status);
                console.log('üîç [FRONTEND] API response headers:', Object.fromEntries(response.headers.entries()));
                
                const responseText = await response.text();
                console.log('üîç [FRONTEND] API response body:', responseText);
                
                return {
                    success: true,
                    csrfToken: csrfToken,
                    requestHeaders: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    responseStatus: response.status,
                    responseHeaders: Object.fromEntries(response.headers.entries()),
                    responseBody: responseText
                };
            });
            
            console.log('üîç STEP 4.1: API request test results:', apiRequestTest);
            
            const result = {
                hypothesis: 'CSRF Token in Request Headers',
                testExecuted: apiRequestTest.success !== undefined,
                csrfToken: apiRequestTest.csrfToken,
                isPlaceholder: apiRequestTest.isPlaceholder,
                requestHeaders: apiRequestTest.requestHeaders,
                responseStatus: apiRequestTest.responseStatus,
                responseBody: apiRequestTest.responseBody,
                conclusion: 'CSRF token in request headers test completed' if apiRequestTest.success !== undefined else 'CSRF token in request headers test failed - no valid token'
            };
            
            console.log('üîç STEP 4.2: HYPOTHESIS 4 RESULT:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå HYPOTHESIS 4 TEST FAILED:', error);
            return {
                hypothesis: 'CSRF Token in Request Headers',
                error: error.message,
                conclusion: 'TEST FAILED - Cannot determine CSRF token in request headers status'
            };
        }
    }

    /**
     * HYPOTHESIS 5: Backend CSRF validation failing due to token mismatch/expiry
     * Test: Verify if the backend is receiving and validating CSRF tokens correctly
     */
    async testHypothesis5_BackendCSRFValidation() {
        console.log('\nüß™ TESTING HYPOTHESIS 5: Backend CSRF Validation');
        console.log('=' .repeat(70));
        
        try {
            // This test will analyze the response from the previous API call
            // to determine if the backend CSRF validation is working
            
            console.log('üîç STEP 5.1: Analyzing previous API response for CSRF validation...');
            
            // Get the last API response from the previous test
            const lastResponse = this.debugData.lastApiResponse;
            
            if (!lastResponse) {
                console.log('üîç STEP 5.2: No previous API response available for analysis');
                return {
                    hypothesis: 'Backend CSRF Validation',
                    error: 'No API response available for analysis',
                    conclusion: 'Cannot determine backend CSRF validation status'
                };
            }
            
            console.log('üîç STEP 5.2: Last API response status:', lastResponse.status);
            console.log('üîç STEP 5.3: Last API response body:', lastResponse.body);
            
            // Analyze the response
            let validationResult = 'UNKNOWN';
            let errorDetails = null;
            
            if (lastResponse.status === 403) {
                if (lastResponse.body.includes('CSRF token required')) {
                    validationResult = 'FAILED - CSRF token missing';
                    errorDetails = 'Backend rejected request due to missing CSRF token';
                } else if (lastResponse.body.includes('Invalid CSRF token')) {
                    validationResult = 'FAILED - CSRF token invalid';
                    errorDetails = 'Backend rejected request due to invalid CSRF token';
                } else if (lastResponse.body.includes('CSRF token expired')) {
                    validationResult = 'FAILED - CSRF token expired';
                    errorDetails = 'Backend rejected request due to expired CSRF token';
                } else {
                    validationResult = 'FAILED - Unknown CSRF error';
                    errorDetails = `Backend returned 403 with message: ${lastResponse.body}`;
                }
            } else if (lastResponse.status === 401) {
                validationResult = 'FAILED - Authentication error';
                errorDetails = 'Backend rejected request due to authentication failure';
            } else if (lastResponse.status === 201 || lastResponse.status === 200) {
                validationResult = 'SUCCESS - CSRF validation passed';
                errorDetails = 'Backend accepted request and CSRF validation succeeded';
            }
            
            const result = {
                hypothesis: 'Backend CSRF Validation',
                responseStatus: lastResponse.status,
                responseBody: lastResponse.body,
                validationResult: validationResult,
                errorDetails: errorDetails,
                conclusion: validationResult
            };
            
            console.log('üîç STEP 5.4: HYPOTHESIS 5 RESULT:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå HYPOTHESIS 5 TEST FAILED:', error);
            return {
                hypothesis: 'Backend CSRF Validation',
                error: error.message,
                conclusion: 'TEST FAILED - Cannot determine backend CSRF validation status'
            };
        }
    }

    /**
     * RUN ALL HYPOTHESIS TESTS SIMULTANEOUSLY
     */
    async runAllHypothesisTests() {
        console.log('üöÄ STARTING COMPREHENSIVE CSRF 403 DEBUGGING TEST SUITE');
        console.log('=' .repeat(80));
        console.log('üß™ TESTING ALL 5 HYPOTHESES SIMULTANEOUSLY WITH EXTENSIVE LOGGING');
        console.log('=' .repeat(80));
        
        try {
            await this.setup();
            
            // Run all hypothesis tests
            const hypothesis1 = await this.testHypothesis1_CSRFTokenGeneration();
            const hypothesis2 = await this.testHypothesis2_CSRFTokenInjection();
            const hypothesis3 = await this.testHypothesis3_FrontendCSRFTokenExtraction();
            const hypothesis4 = await this.testHypothesis4_CSRFTokenInRequestHeaders();
            const hypothesis5 = await this.testHypothesis5_BackendCSRFValidation();
            
            // Store results for analysis
            this.testResults = [hypothesis1, hypothesis2, hypothesis3, hypothesis4, hypothesis5];
            
            // Generate comprehensive analysis
            this.generateComprehensiveAnalysis();
            
        } catch (error) {
            console.error('‚ùå COMPREHENSIVE TEST SUITE FAILED:', error);
        } finally {
            await this.teardown();
        }
    }

    /**
     * Generate comprehensive analysis of all test results
     */
    generateComprehensiveAnalysis() {
        console.log('\nüìä COMPREHENSIVE CSRF 403 DEBUGGING ANALYSIS');
        console.log('=' .repeat(80));
        
        const passedTests = this.testResults.filter(t => !t.error && t.conclusion.includes('working'));
        const failedTests = this.testResults.filter(t => t.error || t.conclusion.includes('FAILING'));
        
        console.log(`‚úÖ WORKING COMPONENTS: ${passedTests.length}/5`);
        console.log(`‚ùå FAILING COMPONENTS: ${failedTests.length}/5`);
        
        console.log('\nüìã DETAILED HYPOTHESIS RESULTS:');
        this.testResults.forEach((test, index) => {
            console.log(`\n${index + 1}. ${test.hypothesis}`);
            console.log(`   Status: ${test.error ? '‚ùå TEST FAILED' : (test.conclusion.includes('working') ? '‚úÖ WORKING' : '‚ùå FAILING')}`);
            console.log(`   Conclusion: ${test.conclusion}`);
            if (test.error) {
                console.log(`   Error: ${test.error}`);
            }
        });
        
        // Root cause analysis
        console.log('\nüîç ROOT CAUSE ANALYSIS:');
        if (failedTests.length > 0) {
            console.log('‚ùå ROOT CAUSE IDENTIFIED:');
            failedTests.forEach(test => {
                console.log(`   - ${test.hypothesis}: ${test.conclusion}`);
            });
        } else {
            console.log('‚úÖ ALL COMPONENTS WORKING - Root cause not confirmed');
        }
        
        // Recommendations
        console.log('\nüí° IMMEDIATE ACTION REQUIRED:');
        if (failedTests.some(t => t.hypothesis.includes('Generation'))) {
            console.log('üîß FIX REQUIRED: Backend CSRF token generation is failing');
        }
        if (failedTests.some(t => t.hypothesis.includes('Injection'))) {
            console.log('üîß FIX REQUIRED: CSRF token injection into HTML is failing');
        }
        if (failedTests.some(t => t.hypothesis.includes('Extraction'))) {
            console.log('üîß FIX REQUIRED: Frontend CSRF token extraction is failing');
        }
        if (failedTests.some(t => t.hypothesis.includes('Request Headers'))) {
            console.log('üîß FIX REQUIRED: CSRF token not being sent in request headers');
        }
        if (failedTests.some(t => t.hypothesis.includes('Validation'))) {
            console.log('üîß FIX REQUIRED: Backend CSRF validation is failing');
        }
    }
}

// Run the comprehensive test suite
async function main() {
    const testSuite = new CSRF403ComprehensiveDebugTest();
    await testSuite.runAllHypothesisTests();
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = CSRF403ComprehensiveDebugTest;
